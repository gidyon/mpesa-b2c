// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package b2c_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// B2CV1Client is the client API for B2CV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type B2CV1Client interface {
	// Transfer funds from business to customer
	TransferFunds(ctx context.Context, in *TransferFundsRequest, opts ...grpc.CallOption) (*TransferFundsResponse, error)
	// Retrieves a single b2c payment resource
	GetB2CPayment(ctx context.Context, in *GetB2CPaymentRequest, opts ...grpc.CallOption) (*B2CPayment, error)
	// Retrieves a collection of b2c payments
	ListB2CPayments(ctx context.Context, in *ListB2CPaymentsRequest, opts ...grpc.CallOption) (*ListB2CPaymentsResponse, error)
	// Processes b2c payment updating its status
	ProcessB2CPayment(ctx context.Context, in *ProcessB2CPaymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Publishes b2c payment to consumers
	PublishB2CPayment(ctx context.Context, in *PublishB2CPaymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Retrieves a collection of statistics
	ListDailyStats(ctx context.Context, in *ListDailyStatsRequest, opts ...grpc.CallOption) (*StatsResponse, error)
	// Queries for query transaction
	QueryTransactionStatus(ctx context.Context, in *QueryTransactionStatusRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	// Queries for account balance
	QueryAccountBalance(ctx context.Context, in *QueryAccountBalanceRequest, opts ...grpc.CallOption) (*QueryAccountBalanceResponse, error)
	// Reverses an mpesa transaction
	ReverseTransaction(ctx context.Context, in *ReverseTransactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type b2CV1Client struct {
	cc grpc.ClientConnInterface
}

func NewB2CV1Client(cc grpc.ClientConnInterface) B2CV1Client {
	return &b2CV1Client{cc}
}

func (c *b2CV1Client) TransferFunds(ctx context.Context, in *TransferFundsRequest, opts ...grpc.CallOption) (*TransferFundsResponse, error) {
	out := new(TransferFundsResponse)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.b2c.B2CV1/TransferFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *b2CV1Client) GetB2CPayment(ctx context.Context, in *GetB2CPaymentRequest, opts ...grpc.CallOption) (*B2CPayment, error) {
	out := new(B2CPayment)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.b2c.B2CV1/GetB2CPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *b2CV1Client) ListB2CPayments(ctx context.Context, in *ListB2CPaymentsRequest, opts ...grpc.CallOption) (*ListB2CPaymentsResponse, error) {
	out := new(ListB2CPaymentsResponse)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.b2c.B2CV1/ListB2CPayments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *b2CV1Client) ProcessB2CPayment(ctx context.Context, in *ProcessB2CPaymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.b2c.B2CV1/ProcessB2CPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *b2CV1Client) PublishB2CPayment(ctx context.Context, in *PublishB2CPaymentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.b2c.B2CV1/PublishB2CPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *b2CV1Client) ListDailyStats(ctx context.Context, in *ListDailyStatsRequest, opts ...grpc.CallOption) (*StatsResponse, error) {
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.b2c.B2CV1/ListDailyStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *b2CV1Client) QueryTransactionStatus(ctx context.Context, in *QueryTransactionStatusRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.b2c.B2CV1/QueryTransactionStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *b2CV1Client) QueryAccountBalance(ctx context.Context, in *QueryAccountBalanceRequest, opts ...grpc.CallOption) (*QueryAccountBalanceResponse, error) {
	out := new(QueryAccountBalanceResponse)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.b2c.B2CV1/QueryAccountBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *b2CV1Client) ReverseTransaction(ctx context.Context, in *ReverseTransactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.mpesa.b2c.B2CV1/ReverseTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// B2CV1Server is the server API for B2CV1 service.
// All implementations must embed UnimplementedB2CV1Server
// for forward compatibility
type B2CV1Server interface {
	// Transfer funds from business to customer
	TransferFunds(context.Context, *TransferFundsRequest) (*TransferFundsResponse, error)
	// Retrieves a single b2c payment resource
	GetB2CPayment(context.Context, *GetB2CPaymentRequest) (*B2CPayment, error)
	// Retrieves a collection of b2c payments
	ListB2CPayments(context.Context, *ListB2CPaymentsRequest) (*ListB2CPaymentsResponse, error)
	// Processes b2c payment updating its status
	ProcessB2CPayment(context.Context, *ProcessB2CPaymentRequest) (*emptypb.Empty, error)
	// Publishes b2c payment to consumers
	PublishB2CPayment(context.Context, *PublishB2CPaymentRequest) (*emptypb.Empty, error)
	// Retrieves a collection of statistics
	ListDailyStats(context.Context, *ListDailyStatsRequest) (*StatsResponse, error)
	// Queries for query transaction
	QueryTransactionStatus(context.Context, *QueryTransactionStatusRequest) (*QueryResponse, error)
	// Queries for account balance
	QueryAccountBalance(context.Context, *QueryAccountBalanceRequest) (*QueryAccountBalanceResponse, error)
	// Reverses an mpesa transaction
	ReverseTransaction(context.Context, *ReverseTransactionRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedB2CV1Server()
}

// UnimplementedB2CV1Server must be embedded to have forward compatible implementations.
type UnimplementedB2CV1Server struct {
}

func (UnimplementedB2CV1Server) TransferFunds(context.Context, *TransferFundsRequest) (*TransferFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferFunds not implemented")
}
func (UnimplementedB2CV1Server) GetB2CPayment(context.Context, *GetB2CPaymentRequest) (*B2CPayment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetB2CPayment not implemented")
}
func (UnimplementedB2CV1Server) ListB2CPayments(context.Context, *ListB2CPaymentsRequest) (*ListB2CPaymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListB2CPayments not implemented")
}
func (UnimplementedB2CV1Server) ProcessB2CPayment(context.Context, *ProcessB2CPaymentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessB2CPayment not implemented")
}
func (UnimplementedB2CV1Server) PublishB2CPayment(context.Context, *PublishB2CPaymentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishB2CPayment not implemented")
}
func (UnimplementedB2CV1Server) ListDailyStats(context.Context, *ListDailyStatsRequest) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDailyStats not implemented")
}
func (UnimplementedB2CV1Server) QueryTransactionStatus(context.Context, *QueryTransactionStatusRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTransactionStatus not implemented")
}
func (UnimplementedB2CV1Server) QueryAccountBalance(context.Context, *QueryAccountBalanceRequest) (*QueryAccountBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAccountBalance not implemented")
}
func (UnimplementedB2CV1Server) ReverseTransaction(context.Context, *ReverseTransactionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReverseTransaction not implemented")
}
func (UnimplementedB2CV1Server) mustEmbedUnimplementedB2CV1Server() {}

// UnsafeB2CV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to B2CV1Server will
// result in compilation errors.
type UnsafeB2CV1Server interface {
	mustEmbedUnimplementedB2CV1Server()
}

func RegisterB2CV1Server(s grpc.ServiceRegistrar, srv B2CV1Server) {
	s.RegisterService(&_B2CV1_serviceDesc, srv)
}

func _B2CV1_TransferFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(B2CV1Server).TransferFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.b2c.B2CV1/TransferFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(B2CV1Server).TransferFunds(ctx, req.(*TransferFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _B2CV1_GetB2CPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetB2CPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(B2CV1Server).GetB2CPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.b2c.B2CV1/GetB2CPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(B2CV1Server).GetB2CPayment(ctx, req.(*GetB2CPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _B2CV1_ListB2CPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListB2CPaymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(B2CV1Server).ListB2CPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.b2c.B2CV1/ListB2CPayments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(B2CV1Server).ListB2CPayments(ctx, req.(*ListB2CPaymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _B2CV1_ProcessB2CPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessB2CPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(B2CV1Server).ProcessB2CPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.b2c.B2CV1/ProcessB2CPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(B2CV1Server).ProcessB2CPayment(ctx, req.(*ProcessB2CPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _B2CV1_PublishB2CPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishB2CPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(B2CV1Server).PublishB2CPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.b2c.B2CV1/PublishB2CPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(B2CV1Server).PublishB2CPayment(ctx, req.(*PublishB2CPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _B2CV1_ListDailyStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDailyStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(B2CV1Server).ListDailyStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.b2c.B2CV1/ListDailyStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(B2CV1Server).ListDailyStats(ctx, req.(*ListDailyStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _B2CV1_QueryTransactionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTransactionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(B2CV1Server).QueryTransactionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.b2c.B2CV1/QueryTransactionStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(B2CV1Server).QueryTransactionStatus(ctx, req.(*QueryTransactionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _B2CV1_QueryAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAccountBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(B2CV1Server).QueryAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.b2c.B2CV1/QueryAccountBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(B2CV1Server).QueryAccountBalance(ctx, req.(*QueryAccountBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _B2CV1_ReverseTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReverseTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(B2CV1Server).ReverseTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.mpesa.b2c.B2CV1/ReverseTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(B2CV1Server).ReverseTransaction(ctx, req.(*ReverseTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _B2CV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gidyon.mpesa.b2c.B2CV1",
	HandlerType: (*B2CV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransferFunds",
			Handler:    _B2CV1_TransferFunds_Handler,
		},
		{
			MethodName: "GetB2CPayment",
			Handler:    _B2CV1_GetB2CPayment_Handler,
		},
		{
			MethodName: "ListB2CPayments",
			Handler:    _B2CV1_ListB2CPayments_Handler,
		},
		{
			MethodName: "ProcessB2CPayment",
			Handler:    _B2CV1_ProcessB2CPayment_Handler,
		},
		{
			MethodName: "PublishB2CPayment",
			Handler:    _B2CV1_PublishB2CPayment_Handler,
		},
		{
			MethodName: "ListDailyStats",
			Handler:    _B2CV1_ListDailyStats_Handler,
		},
		{
			MethodName: "QueryTransactionStatus",
			Handler:    _B2CV1_QueryTransactionStatus_Handler,
		},
		{
			MethodName: "QueryAccountBalance",
			Handler:    _B2CV1_QueryAccountBalance_Handler,
		},
		{
			MethodName: "ReverseTransaction",
			Handler:    _B2CV1_ReverseTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "b2c.v1.proto",
}
